To find minimum number of coins we take INT_MAX initially, so that any number can be less than this value.

Memoization
-----------

  int fun(vector<int>& coins, int amount,int n,vector<vector<int>>& dp){
      if(n==0) return INT_MAX;
      if(amount==0) return 0;
      if(dp[n][amount]!=-1) return dp[n][amount];
      if(coins[n-1]<=amount){
          int a=fun(coins,amount-coins[n-1],n,dp);
          if(a==INT_MAX) return dp[n][amount]=fun(coins,amount,n-1,dp);
          return dp[n][amount]=min(1+a,fun(coins,amount,n-1,dp));
      }
      return dp[n][amount]=fun(coins,amount,n-1,dp);
  }

  int coinChange(vector<int>& coins, int amount) {
      vector<vector<int>> dp(coins.size()+1,vector<int>(amount+1,-1));
      int a=fun(coins,amount,coins.size(),dp);
      if(a==INT_MAX) return -1;
      return a;
  }

Tabulation
----------

int coinChange(vector<int>& coins, int amount) {
     int n=coins.size();
     vector<vector<int>> dp(n+1,vector<int>(amount+1,INT_MAX-1));
     for(int i=0;i<=n;i++){
         for(int j=0;j<=amount;j++){
             if(j==0) dp[i][j]=0;
             else if(i==0) dp[i][j]=INT_MAX-1;
             else{
                 if(coins[i-1]<=j){
                     if(dp[i][j-coins[i-1]]==INT_MAX-1 and dp[i-1][j]==INT_MAX-1)
                         dp[i][j]=INT_MAX-1;
                     else if(dp[i-1][j]==INT_MAX-1) dp[i][j]=1+dp[i][j-coins[i-1]];
                     else if(dp[i][j-coins[i-1]]==INT_MAX-1) dp[i][j]=dp[i-1][j];
                     else dp[i][j]=min(1+dp[i][j-coins[i-1]],dp[i-1][j]);
                 }
                 else dp[i][j]=dp[i-1][j];
             }
         }
     }
     return (dp[n][amount]==INT_MAX-1?-1:dp[n][amount]);
 }

